diff --git a/src/pinky.c b/src/pinky.c
index 79317dc34..44522320d 100644
--- a/src/pinky.c
+++ b/src/pinky.c
@@ -21,6 +21,10 @@
 #include <pwd.h>
 #include <stdio.h>
 
+#if defined(WITH_SYSTEMD) || defined(WITH_ELOGIND)
+#include <systemd/sd-login.h>
+#endif
+
 #include <sys/types.h>
 #include "system.h"
 
@@ -171,6 +175,147 @@ idle_string (time_t when)
   return buf;
 }
 
+#if defined(WITH_SYSTEMD) || defined(WITH_ELOGIND)
+/* Return a time string.  */
+static char const *
+time_string (const char *session)
+{
+  static char buf[INT_STRLEN_BOUND (intmax_t) + sizeof "-%m-%d %H:%M"];
+  uint64_t time;
+  int r;
+
+  if ((r = sd_session_get_start_time (session, &time)) < 0)
+    die (EXIT_FAILURE, -r, _("Couldn't get start time of session"));
+
+  time_t t = time /(uint64_t) 1000000ULL;
+  struct tm *tmp = localtime (&t);
+
+  if (tmp)
+    {
+      strftime (buf, sizeof buf, time_format, tmp);
+      return buf;
+    }
+  else
+    return timetostr (t, buf);
+}
+
+/* Display a line of information about logind session. */
+
+static void
+print_entry (const char *session)
+{
+  struct stat stats;
+  time_t last_change;
+  char mesg;
+  char *tty;
+  char *name;
+  char *remote_host = NULL;
+  int r;
+
+#define DEV_DIR_WITH_TRAILING_SLASH "/dev/"
+#define DEV_DIR_LEN (sizeof (DEV_DIR_WITH_TRAILING_SLASH) - 1)
+
+  if (sd_session_get_tty (session, &tty) < 0)
+    tty = strdup ("???"); /* application did not set TTY */
+
+  if ((r = sd_session_get_username (session, &name)) < 0)
+    die (EXIT_FAILURE, -r , _("couldn't get username"));
+
+  /* XXX no fix size! */
+  char line[/* strlen(tty)*/ 50 + DEV_DIR_LEN + 1];
+  char *p = line;
+
+
+  /* Copy tty into LINE, prepending '/dev/' if tty is not
+     already an absolute file name. sytemd normally never
+     uses the absolute file name. */
+  if ( ! IS_ABSOLUTE_FILE_NAME (tty))
+    p = stpcpy (p, DEV_DIR_WITH_TRAILING_SLASH);
+  stzncpy (p, tty, strlen(tty));
+
+  if (stat (line, &stats) == 0)
+    {
+      mesg = (stats.st_mode & S_IWGRP) ? ' ' : '*';
+      last_change = stats.st_atime;
+    }
+  else
+    {
+      mesg = '?';
+      last_change = 0;
+    }
+
+  printf ("%-8s", name);
+
+  if (include_fullname)
+    {
+      struct passwd *pw;
+
+      pw = getpwnam (name);
+      if (pw == NULL)
+        /* TRANSLATORS: Real name is unknown; at most 19 characters. */
+        printf (" %19s", _("        ???"));
+      else
+        {
+          char *const comma = strchr (pw->pw_gecos, ',');
+          char *result;
+
+          if (comma)
+            *comma = '\0';
+
+          result = create_fullname (pw->pw_gecos, pw->pw_name);
+          printf (" %-19.19s", result);
+          free (result);
+        }
+    }
+  free (name);
+
+  printf (" %c%-8s",
+          mesg, tty);
+  free (tty);
+
+  if (include_idle)
+    {
+      if (last_change)
+        printf (" %-6s", idle_string (last_change));
+      else
+        /* TRANSLATORS: Idle time is unknown; at most 5 characters. */
+        printf (" %-6s", _("?????"));
+    }
+
+  printf (" %s", time_string (session));
+
+  sd_session_get_remote_host (session, &remote_host);
+  if (include_where && remote_host)
+    {
+      char *host = NULL;
+      char *display = NULL;
+
+      /* Look for an X display.  */
+      display = strchr (remote_host, ':');
+      if (display)
+        *display++ = '\0';
+
+      if (remote_host)
+        /* See if we can canonicalize it.  */
+        host = canon_host (remote_host);
+      if ( ! host)
+        host = remote_host;
+
+      if (display)
+        printf (" %s:%s", host, display);
+      else
+        printf (" %s", host);
+
+      if (host != remote_host)
+        free (host);
+
+      free (remote_host);
+    }
+
+  putchar ('\n');
+}
+
+#else
 /* Return a time string.  */
 static char const *
 time_string (const STRUCT_UTMP *utmp_ent)
@@ -301,6 +446,7 @@ print_entry (const STRUCT_UTMP *utmp_ent)
 
   putchar ('\n');
 }
+#endif
 
 /* Display a verbose line of information about UTMP_ENT. */
 
@@ -417,6 +563,38 @@ print_heading (void)
 }
 
 /* Display UTMP_BUF, which should have N entries. */
+#if defined(WITH_SYSTEMD) || defined(WITH_ELOGIND)
+static void
+short_pinky (const int argc_names, char *const argv_names[])
+{
+  char **sessions_list = NULL;
+  int sessions;
+
+  if (hard_locale (LC_TIME))
+    {
+      time_format = "%Y-%m-%d %H:%M";
+      time_format_width = 4 + 1 + 2 + 1 + 2 + 1 + 2 + 1 + 2;
+    }
+  else
+    {
+      time_format = "%b %e %H:%M";
+      time_format_width = 3 + 1 + 2 + 1 + 2 + 1 + 2;
+    }
+
+  if (include_heading)
+    print_heading ();
+
+  sessions = sd_get_sessions (&sessions_list);
+
+  for (int i = 0; i < sessions; i++)
+    {
+      print_entry (sessions_list[i]);
+      free (sessions_list[i]);
+    }
+  free (sessions_list);
+}
+
+#else
 
 static void
 scan_entries (size_t n, const STRUCT_UTMP *utmp_buf,
@@ -457,7 +635,6 @@ scan_entries (size_t n, const STRUCT_UTMP *utmp_buf,
 }
 
 /* Display a list of who is on the system, according to utmp file FILENAME. */
-
 static void
 short_pinky (char const *filename,
              const int argc_names, char *const argv_names[])
@@ -471,6 +648,7 @@ short_pinky (char const *filename,
   scan_entries (n_users, utmp_buf, argc_names, argv_names);
   exit (EXIT_SUCCESS);
 }
+#endif
 
 static void
 long_pinky (const int argc_names, char *const argv_names[])
@@ -594,7 +772,11 @@ main (int argc, char **argv)
     }
 
   if (do_short_format)
+#if defined(WITH_SYSTEMD) || defined(WITH_ELOGIND)
+    short_pinky (n_users, argv + optind);
+#else
     short_pinky (UTMP_FILE, n_users, argv + optind);
+#endif
   else
     long_pinky (n_users, argv + optind);
 
